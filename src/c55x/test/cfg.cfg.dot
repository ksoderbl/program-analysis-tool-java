digraph " CFG Output of c55x program c55x/test/cfg.dis" {
  size="7.44,10.87";
  margin=0.41;
  node [shape=record];
  center=1;
  n0[label="n0: 0: ADD [*AR3+, T1, T1]",color="#a0a0a0"];
  n1[label="n1: 3: SUB [dual(*AR3), AC1, AC0]",color="#a0a0a0"];
  n2[label="n2: 6: BCC [#0x000015, AC0 != #0] (branches  to n8)",color="#a0a0a0"];
  n3[label="n3: 8: POP [AC0, AC1]",color="#a0a0a0"];
  n4[label="n4: a: CALL [#0x00001a] (branches  to n10)",color="#a0a0a0"];
  n5[label="n5: d: CALL [#0x000063] (branches  to n36)",color="#a0a0a0"];
  n6[label="n6: 10: CALL [#0x00008c] (branches  to n48)",color="#a0a0a0"];
  n7[label="n7: 13: B [#0x000003] (branches  to n1)",color="#a0a0a0"];
  n8[label="n8: 15: AND [AC1 \<\< #30, AC0]",color="#a0a0a0"];
  n9[label="n9: 18: RET []",color="#a0a0a0"];
  n10[label="n10: 1a: AND [#65535, AC1, AC0]",color="#a0a0a0"];
  n11[label="n11: 1e: CALCC [#0x000033, TC2] (branches  to n19)",color="#a0a0a0"];
  n12[label="n12: 22: NOP []",color="#a0a0a0"];
  n13[label="n13: 23: NOP []",color="#a0a0a0"];
  n14[label="n14: 24: NOP []",color="#a0a0a0"];
  n15[label="n15: 25: MAS [uns(*AR4), uns(*CDP), AC1] && MAS [uns(*AR3), uns(*CDP), AC0] && MOV [#1, AC2]",color="#a0a0a0"];
  n16[label="n16: 2b: RETCC [TC1]",color="#a0a0a0"];
  n17[label="n17: 2e: BTST [AC0, *AR0, TC1]",color="#a0a0a0"];
  n18[label="n18: 31: RET []",color="#a0a0a0"];
  n19[label="n19: 33: BTSTCLR [#12, *AR3, TC1]",color="#a0a0a0"];
  n20[label="n20: 36: XCC [AR0 != #0] (branches  to n22)",color="#a0a0a0"];
  n21[label="n21: 38: ADD [*AR2+, AC0, AC0]",color="#a0a0a0"];
  n22[label="n22: 3b: SWAP [T0, T2]",color="#a0a0a0"];
  n23[label="n23: 3d: XCC [AR0 != #0] (branches  to n25)",color="#a0a0a0"];
  n24[label="n24: 3f: POP [AC0, AC2] && SUB [#1, AC1]",color="#a0a0a0"];
  n25[label="n25: 43: SWAP [T0, T2]",color="#a0a0a0"];
  n26[label="n26: 45: XCC [AR0 != #0] && SUB [#1, AC0]",color="#a0a0a0"];
  n27[label="n27: 49: ADD [*AR2+, AC0, AC0]",color="#a0a0a0"];
  n28[label="n28: 4c: SWAP [T0, T2]",color="#a0a0a0"];
  n29[label="n29: 4e: SUB [#1, AC0] && XCC [AR0 != #0] (branches  to n31)",color="#a0a0a0"];
  n30[label="n30: 52: ADD [*AR2+, AC0, AC0]",color="#a0a0a0"];
  n31[label="n31: 55: SWAP [T0, T2]",color="#a0a0a0"];
  n32[label="n32: 57: SUB [#1, AC0] && XCC [AR0 != #0] (branches  to n34)",color="#a0a0a0"];
  n33[label="n33: 5b: POP [AC0, AC2] && SUB [#1, AC1]",color="#a0a0a0"];
  n34[label="n34: 5f: SWAP [T0, T2]",color="#a0a0a0"];
  n35[label="n35: 61: RET []",color="#a0a0a0"];
  n36[label="n36: 63: SUB [#1, T0]",color="#a0a0a0"];
  n37[label="n37: 65: MOV [T0, BRC0]",color="#a0a0a0"];
  n38[label="n38: 67: SUB [#3, T1, T0]",color="#a0a0a0"];
  n39[label="n39: 6b: MOV [T0, CSR] && RPTBLOCAL [#0x000080]",color="#a0a0a0"];
  n40[label="n40: 6f: MOV [*AR0+, *AR4]",color="#a0a0a0"];
  n41[label="n41: 72: MPYM [*AR1+, *AR4+, AC0] && RPT [CSR]",color="#a0a0a0"];
  n42[label="n42: 78: MACM [*AR1+, *AR4+, AC0, AC0] (branches  to n42)",color="#a0a0a0"];
  n43[label="n43: 7c: MACMR [*AR1+, *(AR4-T1), AC0, AC0]",color="#a0a0a0"];
  n44[label="n44: 80: MOV [HI(AC0), *AR2+] (branches  to n40)",color="#a0a0a0"];
  n45[label="n45: 82: MOV [AR4, *-AR3] && MOV [#0, T0]",color="#a0a0a0"];
  n46[label="n46: 86: XCCPART [overflow(AC0)] && MOV [#1, T0]",color="#a0a0a0"];
  n47[label="n47: 8a: RET []",color="#a0a0a0"];
  n48[label="n48: 8c: BCLR [ST1_SXMD]",color="#a0a0a0"];
  n49[label="n49: 8e: MOV [T0, AC0] && RPT [#15]",color="#a0a0a0"];
  n50[label="n50: 92: SUBC [mmap(@T1), AC0, AC0] (branches  to n50)",color="#a0a0a0"];
  n51[label="n51: 96: MOV [HI(AC0), mmap(@T0)]",color="#a0a0a0"];
  n52[label="n52: 99: MOV [AC0, mmap(@BK47)]",color="#a0a0a0"];
  n53[label="n53: 9c: SUB [#3, AC0]",color="#a0a0a0"];
  n54[label="n54: 9e: MOV [AC0, mmap(@CSR)]",color="#a0a0a0"];
  n55[label="n55: a1: ADD [mmap(@T1), T0, T0]",color="#a0a0a0"];
  n56[label="n56: a5: ADD [#1, T0]",color="#a0a0a0"];
  n57[label="n57: a7: BSET [ST1_SXMD]",color="#a0a0a0"];
  n58[label="n58: a9: SUB [#1, T1, T2]",color="#a0a0a0"];
  n59[label="n59: ad: MOV [T2, BRC1]",color="#a0a0a0"];
  n60[label="n60: af: RPTBLOCAL [L2]",color="#a0a0a0"];
  n61[label="n61: b1: MOV [*AR0+, *AR4] && RPTBLOCAL [#0x0000c4]",color="#a0a0a0"];
  n62[label="n62: b6: MPYM [*AR4+, *(AR1+T1), AC0] && RPT [CSR]",color="#a0a0a0"];
  n63[label="n63: bc: MACM [*AR4+, *(AR1+T1), AC0, AC0] (branches  to n63)",color="#a0a0a0"];
  n64[label="n64: c0: MACMR [*AR4+, *(AR1+T0), AC0, AC0]",color="#a0a0a0"];
  n65[label="n65: c4: MOV [HI(AC0), *AR2+] (branches  to n62)",color="#a0a0a0"];
  n66[label="n66: c6: AMAR [*(AR1-T1)] && AMAR [*AR4-] (branches  to n61)",color="#a0a0a0"];
  n67[label="n67: ca: RPTB [L3-3]",color="#a0a0a0"];
  n68[label="n68: cd: SUB [#1, T1, T2]",color="#a0a0a0"];
  n69[label="n69: d1: MOV [HI(AC0), mmap(@T0)] (branches  to n68)",color="#a0a0a0"];
  n70[label="n70: d4: RET []",color="#a0a0a0"];
  program_entry[label="program_entry: fffffffffffffff8: program_entry (branches  to n0)",color="#0040FF",style=bold];
  program_exit[label="program_exit: fffffffffffffffc: program_exit",color="#FF4000",style=bold];
  n0 -> n1;
  n1 -> n2;
  n2 -> n3;
  n3 -> n4;
  n8 -> n9;
  n10 -> n11;
  n11 -> n12;
  n12 -> n13;
  n13 -> n14;
  n14 -> n15;
  n15 -> n16;
  n16 -> n17;
  n17 -> n18;
  n19 -> n20;
  n20 -> n21;
  n21 -> n22;
  n22 -> n23;
  n23 -> n24;
  n24 -> n25;
  n25 -> n26;
  n26 -> n27;
  n27 -> n28;
  n28 -> n29;
  n29 -> n30;
  n30 -> n31;
  n31 -> n32;
  n32 -> n33;
  n33 -> n34;
  n34 -> n35;
  n36 -> n37;
  n37 -> n38;
  n38 -> n39;
  n39 -> n40;
  n40 -> n41;
  n41 -> n42;
  n42 -> n43;
  n43 -> n44;
  n44 -> n45;
  n45 -> n46;
  n46 -> n47;
  n48 -> n49;
  n49 -> n50;
  n50 -> n51;
  n51 -> n52;
  n52 -> n53;
  n53 -> n54;
  n54 -> n55;
  n55 -> n56;
  n56 -> n57;
  n57 -> n58;
  n58 -> n59;
  n59 -> n60;
  n60 -> n61;
  n61 -> n62;
  n62 -> n63;
  n63 -> n64;
  n64 -> n65;
  n65 -> n66;
  n66 -> n67;
  n67 -> n68;
  n68 -> n69;
  n69 -> n70;
  n2 -> n8;
  n4 -> n10;
  n5 -> n36;
  n6 -> n48;
  n7 -> n1;
  n11 -> n19;
  n20 -> n22;
  n23 -> n25;
  n29 -> n31;
  n32 -> n34;
  n42 -> n42;
  n44 -> n40;
  n50 -> n50;
  n63 -> n63;
  n65 -> n62;
  n66 -> n61;
  n69 -> n68;
  program_entry -> n0;
  n16 -> n5;
  n18 -> n5;
  n47 -> n6;
  n70 -> n7;
  n35 -> n12;
  n9 -> program_exit;
}
